%YAML 1.2
---
# https://www.w3.org/TR/xpath20
name: XPath 2.0
scope: source.xpath.2
version: 2
hidden: true

extends: XPath 1.0.sublime-syntax

variables:

  kind_test_functions: |-
    (?x: comment | empty-sequence | (?: document- | namespace- )? node | item
    | processing-instruction | (?: schema- )?(?: attribute | element ) | text )

contexts:

###[ EXPRESSIONS ]############################################################

  expression:
    - meta_prepend: true
    - include: conditional-expression
    - include: for-expression
    - include: quantified-expression

###[ IF EXPRESSIONS ]#########################################################

  conditional-expression:
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-IfExpr
    - match: (if)\s*(\()
      captures:
        1: keyword.control.conditional.if.xpath
        2: meta.group.xpath punctuation.section.group.begin.xpath
      set: if-condition

  if-condition:
    - meta_content_scope: meta.group.xpath
    - match: \)
      scope: meta.group.xpath punctuation.section.group.end.xpath
      set: then-expression
    - include: expressions

  then-expression:
    - match: then\b
      scope: keyword.control.conditional.then.xpath
      set:
        - else-expression
        - expression
    - include: else-pop

  else-expression:
    - match: else\b
      scope: keyword.control.conditional.else.xpath
      set: expression
    - include: else-pop

###[ FOR EXPRESSIONS ]########################################################

  for-expression:
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-ForExpr
    - match: for\b
      scope: keyword.control.loop.for.xpath
      set:
        - return-expression
        - more-in-expressions
        - in-expression

  return-expression:
    - match: return\b
      scope: keyword.control.flow.return.xpath
      set: expression
    - include: else-pop

###[ QUANTIFIED EXPRESSIONS ]#################################################

  quantified-expression:
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-QuantifiedExpr
    - match: (?:every|some)\b
      scope: keyword.control.loop.xpath
      set:
        - satisfies-expression
        - more-in-expressions
        - in-expression

  satisfies-expression:
    - match: satisfies\b
      scope: keyword.other.satisfies.xpath
      set: expression
    - include: else-pop

###[ IN EXPRESSIONS ]#########################################################

  in-expression:
    - match: (\$)(?:({{nc_name}})\s*(:)\s*)?({{nc_name}})?
      captures:
        1: variable.other.xpath punctuation.definition.variable.xpath
        2: variable.namespace.xpath
        3: punctuation.separator.namespace.xpath
        4: variable.other.xpath
      set: in-operator
    - include: in-operator

  in-operator:
    - match: in\b
      scope: keyword.operator.iteration.xpath
      set: expression
    - include: else-pop

  more-in-expressions:
    - match: ','
      scope: punctuation.separator.sequence.xpath
      push: in-expression
    - include: else-pop

###[ TESTS ]##################################################################

  kind-test:
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-KindTest
    - meta_prepend: true
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-AttributeTest
    - match: ((attribute)\s*)(\()
      captures:
        1: meta.function-call.identifier.xpath
        2: support.function.kind-test.xpath
        3: meta.function-call.arguments.xpath punctuation.section.arguments.begin.xpath
      set:
        - predicate-or-path-sep-or-operator
        - kind-test-type-arguments
        - attribute-name
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-ElementTest
    - match: ((element)\s*)(\()
      captures:
        1: meta.function-call.identifier.xpath
        2: support.function.kind-test.xpath
        3: meta.function-call.arguments.xpath punctuation.section.arguments.begin.xpath
      set:
        - predicate-or-path-sep-or-operator
        - kind-test-type-arguments
        - element-name

  kind-test-type-arguments:
    - meta_content_scope: meta.function-call.arguments.xpath
    - match: \)
      scope: meta.function-call.arguments.xpath punctuation.section.arguments.end.xpath
      pop: 1
    - include: stray-brackets
    - match: ','
      scope: punctuation.separator.arguments.xpath
    - match: (?=\S)
      push: sequence-type

###[ FUNCTION CALLS ]#########################################################

  function-call:
    - meta_prepend: true
    # https://www.w3.org/TR/xpath-functions/#func-matches
    # https://www.w3.org/TR/xpath-functions/#func-tokenize
    - match: ((?:({{nc_name}})\s*(:)\s*)?(matches|tokenize)\s*)(\()
      captures:
        1: meta.function-call.identifier.xpath
        2: variable.namespace.xpath
        3: punctuation.separator.namespace.xpath
        4: variable.function.xpath
        5: meta.function-call.arguments.xpath punctuation.section.arguments.begin.xpath
      set:
        - predicate-or-path-sep-or-operator
        - function-call-arguments
        - function-call-pattern
        - expression
    # https://www.w3.org/TR/xpath-functions/#func-replace
    - match: ((?:({{nc_name}})\s*(:)\s*)?(replace)\s*)(\()
      captures:
        1: meta.function-call.identifier.xpath
        2: variable.namespace.xpath
        3: punctuation.separator.namespace.xpath
        4: variable.function.xpath
        5: meta.function-call.arguments.xpath punctuation.section.arguments.begin.xpath
      set:
        - predicate-or-path-sep-or-operator
        - function-call-arguments
        - function-call-replacement
        - function-call-pattern
        - expression

  function-call-arguments:
    - meta_prepend: true
    - match: \?
      scope: constant.other.wildcard.questionmark.xpath

  function-call-pattern:
    - match: ','
      scope: punctuation.separator.arguments.xpath
      set: regexp-pattern
    - include: else-pop

  function-call-replacement:
    - match: ','
      scope: punctuation.separator.arguments.xpath
      set: regexp-replacement
    - include: else-pop

###[ IDENTIFIERS ]############################################################

  attribute-name:
    - meta_prepend: true
    - match: (\*)(\s*(:))
      captures:
        1: entity.other.attribute-name.namespace.xpath constant.other.wildcard.asterisk.xpath
        2: entity.other.attribute-name.xpath
        3: punctuation.separator.namespace.xpath
      set: attribute-local-name

  element-name:
    - meta_prepend: true
    - match: (\*)(\s*(:))
      captures:
        1: entity.name.tag.namespace.xpath constant.other.wildcard.asterisk.xpath
        2: entity.name.tag.xpath
        3: punctuation.separator.namespace.xpath
      set: element-local-name

###[ LITERALS ]###############################################################

  number:
    - meta_prepend: true
    - match: (-*)((?:(\.)\d+|\d+(?:(\.)\d*)?)[eE][-+]?\d+)
      scope: meta.number.double.decimal.xpath
      captures:
        1: keyword.operator.arithmetic.xpath
        2: constant.numeric.value.xpath
        3: punctuation.separator.decimal.xpath
        4: punctuation.separator.decimal.xpath
      set: predicate-or-path-sep-or-operator

  regexp-pattern:
    - match: \"
      scope: punctuation.definition.string.begin.xpath
      set:
        - double-quoted-regexp-pattern-end
        - double-quoted-regexp-pattern-content
    - match: \'
      scope: punctuation.definition.string.begin.xpath
      set:
        - single-quoted-regexp-pattern-end
        - single-quoted-regexp-pattern-content
    - include: else-pop

  double-quoted-regexp-pattern-end:
    - meta_include_prototype: false
    - meta_scope: meta.string.regexp.xpath string.quoted.double.xpath
    - match: \"
      scope: punctuation.definition.string.end.xpath
      pop: 1

  double-quoted-regexp-pattern-content:
    - include: scope:source.regexp.embedded.xpath.string.quoted.double
      apply_prototype: true

  single-quoted-regexp-pattern-end:
    - meta_include_prototype: false
    - meta_scope: meta.string.regexp.xpath string.quoted.single.xpath
    - match: \'
      scope: punctuation.definition.string.end.xpath
      pop: 1

  single-quoted-regexp-pattern-content:
    - include: scope:source.regexp.embedded.xpath.string.quoted.single
      apply_prototype: true

  regexp-replacement:
    - match: \"
      scope: punctuation.definition.string.begin.xpath
      set: double-quoted-regexp-replacement-body
    - match: \'
      scope: punctuation.definition.string.begin.xpath
      set: single-quoted-regexp-replacement-body
    - include: else-pop

  double-quoted-regexp-replacement-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.xpath string.quoted.double.xpath
    - include: double-quoted-string-body
    - include: regexp-replacement-content

  single-quoted-regexp-replacement-body:
    - meta_include_prototype: false
    - meta_scope: meta.string.xpath string.quoted.single.xpath
    - include: single-quoted-string-body
    - include: regexp-replacement-content

  regexp-replacement-content:
    - match: \\\$
      scope: constant.character.escape.xpath
    - match: \$\d+
      scope: constant.character.placeholder.xpath

  double-quoted-string-body:
    - meta_prepend: true
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-EscapeQuot
    - match: \"\"
      scope: constant.character.escape.xpath

  single-quoted-string-body:
    - meta_prepend: true
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-EscapeApos
    - match: \'\'
      scope: constant.character.escape.xpath

###[ OPERATORS ]##############################################################

  unary:
    - meta_prepend: true
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-UnaryExpr
    - match: (?!\++\.?\d)\++
      scope: keyword.operator.arithmetic.xpath

  operator:
    - meta_prepend: true

    # type operators

    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-CastableExpr
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-CastExpr
    - match: ((?:castable|cast)\s+)as
      scope: keyword.operator.type.as.xpath
      set: single-type
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-TreatExpr
    - match: (treat\s+)?as
      scope: keyword.operator.type.as.xpath
      set: sequence-type
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-InstanceofExpr
    - match: instance\s+of
      scope: keyword.operator.comparison.instanceof.xpath
      set: sequence-type

    # expression operators

    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-IntersectExceptExpr
    - match: except
      scope: keyword.operator.except.xpath
      set: expression
    - match: intersect
      scope: keyword.operator.intersect.xpath
      set: expression
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-MultiplicativeExpr
    - match: idiv
      scope: keyword.operator.arithmetic.xpath
      set: expression
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-NodeComp
    - match: is
      scope: keyword.operator.comparison.xpath
      set: expression
    - match: <<|>>
      scope: keyword.operator.comparison.xpath
      set: expression
    # entity encoded `<<`
    - match: (&)lt(;)(&)lt(;)
      scope: keyword.operator.comparison.xpath constant.character.entity.named.xml
      captures:
        1: punctuation.definition.entity.xml
        2: punctuation.terminator.entity.xml
        3: punctuation.definition.entity.xml
        4: punctuation.terminator.entity.xml
      set: expression
    # entity encoded `>>`
    - match: (&)gt(;)(&)gt(;)
      scope: keyword.operator.comparison.xpath constant.character.entity.named.xml
      captures:
        1: punctuation.definition.entity.xml
        2: punctuation.terminator.entity.xml
        3: punctuation.definition.entity.xml
        4: punctuation.terminator.entity.xml
      set: expression
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-RangeExpr
    - match: to
      scope: keyword.operator.range.xpath
      set: expression
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-UnionExpr
    - match: union
      scope: keyword.operator.union.xpath
      set: expression

###[ TYPES ]##################################################################

  single-type:
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-SingleType
    - match: ({{nc_name}})(\s*(:))
      captures:
        1: entity.name.tag.namespace.xpath
        2: entity.name.tag.xpath
        3: punctuation.separator.namespace.xpath
      set: single-type-local-name
    - include: variable
    - include: single-type-local-name

  single-type-local-name:
    - meta_content_scope: entity.name.tag.xpath
    - match: '{{nc_name}}'
      scope: entity.name.tag.localname.xpath storage.type.xpath
      set: single-type-nullable
    - include: else-pop

  single-type-nullable:
    - match: \?
      scope: keyword.operator.nullable.xpath
      pop: 1
    - include: else-pop

  sequence-type:
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-AttributeTest
    - match: ((attribute)\s*)(\()
      captures:
        1: meta.function-call.identifier.xpath
        2: support.function.kind-test.xpath
        3: meta.function-call.arguments.xpath punctuation.section.arguments.begin.xpath
      set:
        - sequence-type-quantifier
        - kind-test-type-arguments
        - attribute-name
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-ElementTest
    - match: ((element)\s*)(\()
      captures:
        1: meta.function-call.identifier.xpath
        2: support.function.kind-test.xpath
        3: meta.function-call.arguments.xpath punctuation.section.arguments.begin.xpath
      set:
        - sequence-type-quantifier
        - kind-test-type-arguments
        - element-name
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-SequenceType
    - match: (({{kind_test_functions}})\s*)(\()
      captures:
        1: meta.function-call.identifier.xpath
        2: support.function.kind-test.xpath
        3: meta.function-call.arguments.xpath punctuation.section.arguments.begin.xpath
      set:
        - sequence-type-quantifier
        - function-call-arguments
    # fallback for incomplete kind test functions
    - match: ((?:({{nc_name}})\s*(:)\s*)?({{nc_name}})\s*)(\()
      captures:
        1: meta.function-call.identifier.xpath
        2: variable.namespace.xpath
        3: punctuation.separator.namespace.xpath
        4: variable.function.xpath
        5: meta.function-call.arguments.xpath punctuation.section.arguments.begin.xpath
      set:
        - sequence-type-quantifier
        - function-call-arguments
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-AtomicType
    - match: ({{nc_name}})(\s*(:))
      captures:
        1: entity.name.tag.namespace.xpath
        2: entity.name.tag.xpath
        3: punctuation.separator.namespace.xpath
      set: sequence-type-local-name
    - include: variable
    - include: sequence-type-local-name

  sequence-type-local-name:
    - meta_content_scope: entity.name.tag.xpath
    - match: '{{nc_name}}'
      scope: entity.name.tag.localname.xpath storage.type.xpath
      set: sequence-type-quantifier
    - include: else-pop

  sequence-type-quantifier:
    # https://www.w3.org/TR/2010/REC-xpath20-20101214/#doc-xpath-OccurrenceIndicator
    - match: '[+*?]'
      scope: keyword.operator.quantifier.xpath
      pop: 1
    - include: else-pop
